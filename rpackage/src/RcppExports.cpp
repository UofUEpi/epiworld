// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// get_today_variant
DataFrame get_today_variant(SEXP model);
RcppExport SEXP _epiworld_get_today_variant(SEXP modelSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< SEXP >::type model(modelSEXP);
    rcpp_result_gen = Rcpp::wrap(get_today_variant(model));
    return rcpp_result_gen;
END_RCPP
}
// get_today_total
DataFrame get_today_total(SEXP model);
RcppExport SEXP _epiworld_get_today_total(SEXP modelSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< SEXP >::type model(modelSEXP);
    rcpp_result_gen = Rcpp::wrap(get_today_total(model));
    return rcpp_result_gen;
END_RCPP
}
// get_hist_total
DataFrame get_hist_total(SEXP model);
RcppExport SEXP _epiworld_get_hist_total(SEXP modelSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< SEXP >::type model(modelSEXP);
    rcpp_result_gen = Rcpp::wrap(get_hist_total(model));
    return rcpp_result_gen;
END_RCPP
}
// get_hist_variant
DataFrame get_hist_variant(SEXP model);
RcppExport SEXP _epiworld_get_hist_variant(SEXP modelSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< SEXP >::type model(modelSEXP);
    rcpp_result_gen = Rcpp::wrap(get_hist_variant(model));
    return rcpp_result_gen;
END_RCPP
}
// new_epi_model
SEXP new_epi_model();
RcppExport SEXP _epiworld_new_epi_model() {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    rcpp_result_gen = Rcpp::wrap(new_epi_model());
    return rcpp_result_gen;
END_RCPP
}
// init_epi_model
int init_epi_model(SEXP model, int nsteps, int seed);
RcppExport SEXP _epiworld_init_epi_model(SEXP modelSEXP, SEXP nstepsSEXP, SEXP seedSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< SEXP >::type model(modelSEXP);
    Rcpp::traits::input_parameter< int >::type nsteps(nstepsSEXP);
    Rcpp::traits::input_parameter< int >::type seed(seedSEXP);
    rcpp_result_gen = Rcpp::wrap(init_epi_model(model, nsteps, seed));
    return rcpp_result_gen;
END_RCPP
}
// run_epi_model
int run_epi_model(SEXP model);
RcppExport SEXP _epiworld_run_epi_model(SEXP modelSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type model(modelSEXP);
    rcpp_result_gen = Rcpp::wrap(run_epi_model(model));
    return rcpp_result_gen;
END_RCPP
}
// set_rewire_degseq
int set_rewire_degseq(SEXP model, double prop);
RcppExport SEXP _epiworld_set_rewire_degseq(SEXP modelSEXP, SEXP propSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type model(modelSEXP);
    Rcpp::traits::input_parameter< double >::type prop(propSEXP);
    rcpp_result_gen = Rcpp::wrap(set_rewire_degseq(model, prop));
    return rcpp_result_gen;
END_RCPP
}
// update_epi_params
int update_epi_params(SEXP model, std::string pname, double value);
RcppExport SEXP _epiworld_update_epi_params(SEXP modelSEXP, SEXP pnameSEXP, SEXP valueSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< SEXP >::type model(modelSEXP);
    Rcpp::traits::input_parameter< std::string >::type pname(pnameSEXP);
    Rcpp::traits::input_parameter< double >::type value(valueSEXP);
    rcpp_result_gen = Rcpp::wrap(update_epi_params(model, pname, value));
    return rcpp_result_gen;
END_RCPP
}
// print_epi_model
SEXP print_epi_model(SEXP x);
RcppExport SEXP _epiworld_print_epi_model(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< SEXP >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(print_epi_model(x));
    return rcpp_result_gen;
END_RCPP
}
// reset_epi_model
SEXP reset_epi_model(SEXP x);
RcppExport SEXP _epiworld_reset_epi_model(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< SEXP >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(reset_epi_model(x));
    return rcpp_result_gen;
END_RCPP
}
// verbose_on_epi_model
int verbose_on_epi_model(SEXP model);
RcppExport SEXP _epiworld_verbose_on_epi_model(SEXP modelSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< SEXP >::type model(modelSEXP);
    rcpp_result_gen = Rcpp::wrap(verbose_on_epi_model(model));
    return rcpp_result_gen;
END_RCPP
}
// verbose_off_epi_model
int verbose_off_epi_model(SEXP model);
RcppExport SEXP _epiworld_verbose_off_epi_model(SEXP modelSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< SEXP >::type model(modelSEXP);
    rcpp_result_gen = Rcpp::wrap(verbose_off_epi_model(model));
    return rcpp_result_gen;
END_RCPP
}
// set_seed_epi_model
int set_seed_epi_model(SEXP model, int seed);
RcppExport SEXP _epiworld_set_seed_epi_model(SEXP modelSEXP, SEXP seedSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< SEXP >::type model(modelSEXP);
    Rcpp::traits::input_parameter< int >::type seed(seedSEXP);
    rcpp_result_gen = Rcpp::wrap(set_seed_epi_model(model, seed));
    return rcpp_result_gen;
END_RCPP
}
// edgelist_from_file
int edgelist_from_file(SEXP model, std::string fname, int skip, bool directed);
RcppExport SEXP _epiworld_edgelist_from_file(SEXP modelSEXP, SEXP fnameSEXP, SEXP skipSEXP, SEXP directedSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< SEXP >::type model(modelSEXP);
    Rcpp::traits::input_parameter< std::string >::type fname(fnameSEXP);
    Rcpp::traits::input_parameter< int >::type skip(skipSEXP);
    Rcpp::traits::input_parameter< bool >::type directed(directedSEXP);
    rcpp_result_gen = Rcpp::wrap(edgelist_from_file(model, fname, skip, directed));
    return rcpp_result_gen;
END_RCPP
}
// edgelist_from_vec
int edgelist_from_vec(SEXP model, const std::vector< unsigned int >& source, const std::vector< unsigned int >& target, bool directed, int min_id, int max_id);
RcppExport SEXP _epiworld_edgelist_from_vec(SEXP modelSEXP, SEXP sourceSEXP, SEXP targetSEXP, SEXP directedSEXP, SEXP min_idSEXP, SEXP max_idSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type model(modelSEXP);
    Rcpp::traits::input_parameter< const std::vector< unsigned int >& >::type source(sourceSEXP);
    Rcpp::traits::input_parameter< const std::vector< unsigned int >& >::type target(targetSEXP);
    Rcpp::traits::input_parameter< bool >::type directed(directedSEXP);
    Rcpp::traits::input_parameter< int >::type min_id(min_idSEXP);
    Rcpp::traits::input_parameter< int >::type max_id(max_idSEXP);
    rcpp_result_gen = Rcpp::wrap(edgelist_from_vec(model, source, target, directed, min_id, max_id));
    return rcpp_result_gen;
END_RCPP
}
// add_tool_immune
int add_tool_immune(SEXP model, std::vector< bool >& baselineseq, double preval, double susceptibility_reduction, double recovery, double death, double transm);
RcppExport SEXP _epiworld_add_tool_immune(SEXP modelSEXP, SEXP baselineseqSEXP, SEXP prevalSEXP, SEXP efficacySEXP, SEXP recoverySEXP, SEXP deathSEXP, SEXP transmSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< SEXP >::type model(modelSEXP);
    Rcpp::traits::input_parameter< std::vector< bool >& >::type baselineseq(baselineseqSEXP);
    Rcpp::traits::input_parameter< double >::type preval(prevalSEXP);
    Rcpp::traits::input_parameter< double >::type susceptibility_reduction(efficacySEXP);
    Rcpp::traits::input_parameter< double >::type recovery(recoverySEXP);
    Rcpp::traits::input_parameter< double >::type death(deathSEXP);
    Rcpp::traits::input_parameter< double >::type transm(transmSEXP);
    rcpp_result_gen = Rcpp::wrap(add_tool_immune(model, baselineseq, preval, susceptibility_reduction, recovery, death, transm));
    return rcpp_result_gen;
END_RCPP
}
// add_tool_vaccine
int add_tool_vaccine(SEXP model, std::vector< bool >& baselineseq, double preval, double susceptibility_reduction, double recovery, double death, double transm);
RcppExport SEXP _epiworld_add_tool_vaccine(SEXP modelSEXP, SEXP baselineseqSEXP, SEXP prevalSEXP, SEXP efficacySEXP, SEXP recoverySEXP, SEXP deathSEXP, SEXP transmSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< SEXP >::type model(modelSEXP);
    Rcpp::traits::input_parameter< std::vector< bool >& >::type baselineseq(baselineseqSEXP);
    Rcpp::traits::input_parameter< double >::type preval(prevalSEXP);
    Rcpp::traits::input_parameter< double >::type susceptibility_reduction(efficacySEXP);
    Rcpp::traits::input_parameter< double >::type recovery(recoverySEXP);
    Rcpp::traits::input_parameter< double >::type death(deathSEXP);
    Rcpp::traits::input_parameter< double >::type transm(transmSEXP);
    rcpp_result_gen = Rcpp::wrap(add_tool_vaccine(model, baselineseq, preval, susceptibility_reduction, recovery, death, transm));
    return rcpp_result_gen;
END_RCPP
}
// add_tool_mask
int add_tool_mask(SEXP model, std::vector< bool >& baselineseq, double preval, double susceptibility_reduction, double transm);
RcppExport SEXP _epiworld_add_tool_mask(SEXP modelSEXP, SEXP baselineseqSEXP, SEXP prevalSEXP, SEXP efficacySEXP, SEXP transmSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< SEXP >::type model(modelSEXP);
    Rcpp::traits::input_parameter< std::vector< bool >& >::type baselineseq(baselineseqSEXP);
    Rcpp::traits::input_parameter< double >::type preval(prevalSEXP);
    Rcpp::traits::input_parameter< double >::type susceptibility_reduction(efficacySEXP);
    Rcpp::traits::input_parameter< double >::type transm(transmSEXP);
    rcpp_result_gen = Rcpp::wrap(add_tool_mask(model, baselineseq, preval, susceptibility_reduction, transm));
    return rcpp_result_gen;
END_RCPP
}
// add_virus_covid19
int add_virus_covid19(SEXP model, std::vector< bool > baselineseq, double preval, double mutrate, double post_immunity);
RcppExport SEXP _epiworld_add_virus_covid19(SEXP modelSEXP, SEXP baselineseqSEXP, SEXP prevalSEXP, SEXP mutrateSEXP, SEXP post_immunitySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< SEXP >::type model(modelSEXP);
    Rcpp::traits::input_parameter< std::vector< bool > >::type baselineseq(baselineseqSEXP);
    Rcpp::traits::input_parameter< double >::type preval(prevalSEXP);
    Rcpp::traits::input_parameter< double >::type mutrate(mutrateSEXP);
    Rcpp::traits::input_parameter< double >::type post_immunity(post_immunitySEXP);
    rcpp_result_gen = Rcpp::wrap(add_virus_covid19(model, baselineseq, preval, mutrate, post_immunity));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_epiworld_get_today_variant", (DL_FUNC) &_epiworld_get_today_variant, 1},
    {"_epiworld_get_today_total", (DL_FUNC) &_epiworld_get_today_total, 1},
    {"_epiworld_get_hist_total", (DL_FUNC) &_epiworld_get_hist_total, 1},
    {"_epiworld_get_hist_variant", (DL_FUNC) &_epiworld_get_hist_variant, 1},
    {"_epiworld_new_epi_model", (DL_FUNC) &_epiworld_new_epi_model, 0},
    {"_epiworld_init_epi_model", (DL_FUNC) &_epiworld_init_epi_model, 3},
    {"_epiworld_run_epi_model", (DL_FUNC) &_epiworld_run_epi_model, 1},
    {"_epiworld_set_rewire_degseq", (DL_FUNC) &_epiworld_set_rewire_degseq, 2},
    {"_epiworld_update_epi_params", (DL_FUNC) &_epiworld_update_epi_params, 3},
    {"_epiworld_print_epi_model", (DL_FUNC) &_epiworld_print_epi_model, 1},
    {"_epiworld_reset_epi_model", (DL_FUNC) &_epiworld_reset_epi_model, 1},
    {"_epiworld_verbose_on_epi_model", (DL_FUNC) &_epiworld_verbose_on_epi_model, 1},
    {"_epiworld_verbose_off_epi_model", (DL_FUNC) &_epiworld_verbose_off_epi_model, 1},
    {"_epiworld_set_seed_epi_model", (DL_FUNC) &_epiworld_set_seed_epi_model, 2},
    {"_epiworld_edgelist_from_file", (DL_FUNC) &_epiworld_edgelist_from_file, 4},
    {"_epiworld_edgelist_from_vec", (DL_FUNC) &_epiworld_edgelist_from_vec, 6},
    {"_epiworld_add_tool_immune", (DL_FUNC) &_epiworld_add_tool_immune, 7},
    {"_epiworld_add_tool_vaccine", (DL_FUNC) &_epiworld_add_tool_vaccine, 7},
    {"_epiworld_add_tool_mask", (DL_FUNC) &_epiworld_add_tool_mask, 5},
    {"_epiworld_add_virus_covid19", (DL_FUNC) &_epiworld_add_virus_covid19, 5},
    {NULL, NULL, 0}
};

RcppExport void R_init_epiworld(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
